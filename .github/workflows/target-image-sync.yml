name: Target Sync Image
on:
  issues:
    types:
      - opened

# https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
permissions:
  issues: write

jobs:
  sync:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'sync image')
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # REGISTRY: ${{ secrets.REGISTRY }}
      # NAME_SPACE: ${{ secrets.NAME_SPACE }}
      # USER: ${{ secrets.USER }}
      # PASSWORD: ${{ secrets.PASSWORD }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Check Issue
      id: get-image
      env:
        IMAGE: "${{ github.event.issue.title }}"
      run: |
        ORIGIN_IMAGE=$(echo "${IMAGE}" | sed 's/ //g')
        if [[ "${ORIGIN_IMAGE}" == *"//"* ]] || [[ "${ORIGIN_IMAGE}" == *" "* ]]; then
          gh issue comment ${{ github.event.issue.number }} -b "镜像 '${ORIGIN_IMAGE}' 不是一个镜像"
          exit 1
        fi
        if [[ "${ORIGIN_IMAGE%%/*}" != *"."* ]] || [[ "${ORIGIN_IMAGE}" != *"/"* ]]; then
          if [[ "${ORIGIN_IMAGE}" != *":"* ]]; then
            gh issue comment ${{ github.event.issue.number }} -b "由于你没有指定tag或者域名将使用默认的仓库\`docker.io\`和默认的tag\`latest\`,如: \`docker.io/${ORIGIN_IMAGE}:latest\`"
            ORIGIN_IMAGE="docker.io/${ORIGIN_IMAGE}:latest"
            gh issue edit ${{ github.event.issue.number }} --title "${ORIGIN_IMAGE}"
          else
            gh issue comment ${{ github.event.issue.number }} -b "由于你没有指定仓库名将使用默认的仓库\`docker.io\`,如: \`docker.io/${ORIGIN_IMAGE}\`"
            ORIGIN_IMAGE="docker.io/${ORIGIN_IMAGE}"
            gh issue edit ${{ github.event.issue.number }} --title "${ORIGIN_IMAGE}"
          fi
          # exit 1
        fi
        if [[ "${ORIGIN_IMAGE}" != *":"* ]]; then
          gh issue comment ${{ github.event.issue.number }} -b "由于你没有指定仓库名将使用默认的tag\`latest\`, 如: \`${ORIGIN_IMAGE}:latest\`"
          ORIGIN_IMAGE="${ORIGIN_IMAGE}:latest"
          gh issue edit ${{ github.event.issue.number }} --title "${ORIGIN_IMAGE}"
          # exit 1
        fi
        echo "image=${ORIGIN_IMAGE}" >> $GITHUB_OUTPUT
    - name: Check Image
      run: |
        ORIGIN_IMAGE="${{ steps.get-image.outputs.image }}"
        gh issue comment ${{ github.event.issue.number }} -b "镜像 ${ORIGIN_IMAGE} 同步中...<br>[详情请查看](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
  
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        registry: ${{ secrets.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Install Skopeo
      run: |
        sudo apt-get update
        sudo apt-get install -y skopeo
        sudo curl -O https://cn-north-4-hdn-koocli.obs.cn-north-4.myhuaweicloud.com/cli/latest/huaweicloud-cli-linux-amd64.tar.gz
        sudo tar xf huaweicloud-cli-linux-amd64.tar.gz -C /usr/bin hcloud
        sudo rm -rf huaweicloud-cli-linux-amd64.tar.gz
    - name: Sync Docker Image
      run: |
        set -x
        ORIGIN_IMAGE="${{ steps.get-image.outputs.image }}"
        BASE_IMAGE=$(echo ${ORIGIN_IMAGE} | sed 's/\(.*\):.*/\1/')
        TARGET_IMAGE="${{ secrets.REGISTRY }}/${{ secrets.NAMESPACE }}/${ORIGIN_IMAGE}"
        skopeo copy docker://${ORIGIN_IMAGE} docker://${TARGET_IMAGE}
        # docker pull ${ORIGIN_IMAGE}
        # docker tag ${ORIGIN_IMAGE} ${TARGET_IMAGE}
        # docker push ${TARGET_IMAGE}
        # docker pull ${TARGET_IMAGE}
        echo "创建配置"
        sudo /usr/bin/hcloud configure set --cli-profile=default --cli-lang=en --cli-mode=AKSK --cli-region=cn-east-2 --cli-access-key=${{ secrets.HW_ACCESS_KEY }} --cli-secret-key=${{ secrets.HW_SECRET_KEY }} --cli-agree-privacy-statement=true

        echo "设置 ${BASE_IMAGE} 为公共镜像"
        RESPONSE=$(sudo /usr/bin/hcloud SWR UpdateRepo --namespace="${{ secrets.NAMESPACE }}" --repository="${BASE_IMAGE//\//%24}" --is_public=true)

        # Check if the response matches the expected value
        if [[ "$RESPONSE" == "{}" ]]; then
          echo "API call was successful and returned the expected value."
          gh issue comment ${{ github.event.issue.number }} -b "$(echo -e "\n镜像 \`${ORIGIN_IMAGE}\` 同步完成<br>请使用 \`${TARGET_IMAGE}\` 替代源镜像<br> <h1>快捷命令</h1>[去使用快捷复制和查看镜像详细信息](https://dockerimage.gbfeng.com/image/${ORIGIN_IMAGE})\n\`\`\`sh\n# Docker 拉取命令\ndocker pull ${TARGET_IMAGE}\ndocker tag ${TARGET_IMAGE} ${ORIGIN_IMAGE}\n\n# Containerd 拉取命令\nctr images pull ${TARGET_IMAGE}\nctr images tag ${TARGET_IMAGE} ${ORIGIN_IMAGE}\n\n# Shell 快速替换命令\nsed -i "s#${ORIGIN_IMAGE}#${TARGET_IMAGE}#g" 你的文件名\n\`\`\`\n")"
          gh issue edit ${{ github.event.issue.number }} --add-label "sync image succeeded" -b "IMAGE SYNC"
          gh issue close ${{ github.event.issue.number }} --reason "completed"
        else
          echo "API call did not return the expected value."
          echo "Response: $RESPONSE"
          exit 1
        fi

        sudo rm -rf ~/.hcloud
    - name: Fail Sync
      if: failure()
      run: |
        ORIGIN_IMAGE="${{ steps.get-image.outputs.image }}"
        gh issue comment ${{ github.event.issue.number }} -b "镜像 ${ORIGIN_IMAGE} 同步失败[详情请查看](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})<br>请检查 image 是否存在, [查看成功例子](https://github.com/kubesre/docker-registry-mirrors/issues/13)<br>如果需要同步, 请重新提交正确的issue"
        gh issue edit ${{ github.event.issue.number }} --add-label "sync image failure" -b "IMAGE SYNC"
        gh issue close ${{ github.event.issue.number }} --reason "not planned"
